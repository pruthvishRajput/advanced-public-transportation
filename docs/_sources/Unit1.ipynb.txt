{
 "cells": [
  {
   "attachments": {
    "GenericArchitecture.jpg": {
     "image/jpeg": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Preprocessing\n",
    "## Introduction\n",
    "In this project, we present the demonstration of Advanced Urban Public Transportation System with two applications - automatic bus-stop detection and bus arrival time prediction. It includes the implementation of preprocessing steps to address the problem of GPS outage and unavailability of GPS. Further, we present an interactive implementation and demonstration of automatic bus-stop detection and bus arrival time prediction. The demonstration is based upon our work \"Advanced Urban Public Transportation System for Indian Scenarios\" [1].\n",
    "\n",
    "### System model\n",
    "\n",
    "![GenericArchitecture.jpg](attachment:GenericArchitecture.jpg)\n",
    "\n",
    "The system model consists of three modules 1) Bus module, 2) Server module, and 3) Commuter module. In the following, we describe these three modules.\n",
    "\n",
    "**Bus module** The bus module is implemented as an application installed in an Android operating system based smartphone carried in the bus. It publishes the real-time location of a bus periodically (every second) to a server through a publish-subscribe mechanism based Message Queuing Telemetry Transport (MQTT) broker.\n",
    "\n",
    "**Server module** The server module receives the real-time location updates of all the buses through the [*EMQ*](http://emqtt.io/) publish-subscribe  broker. It applies the preprocessing steps to clean the data, stores the location data into *MongoDB* database, applies bus-stop detection algorithm, and arrival time prediction algorithm based on travel time estimates computed using historical trips.\n",
    "\n",
    "**Commuter module** The commuter module permits a commuter to subscribe for the real-time updates from one or more ongoing trips. The [MQTT messaging protocol](http://mqtt.org/) is used for all the interactions among commuter and server modules.\n",
    "\n",
    "In this project, we shall begin by preprocessing the bus location records collected using the bus module. Further, we will apply automatic bus-stop detection, travel time estimation, and bus arrival time prediction and develop an interactive demonstration of bus-stop detector and arrival time predictor. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Store raw location records into MongoDB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Import and initialize MongoClient'''\n",
    "from pymongo import MongoClient\n",
    "con = MongoClient()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bound definition\n",
    "The data collection was performed on the college shuttle bus plying between ISCON, Ahmedabad and PDPU, Gandhinagar for morning and evening trips. The morning trip usually begins at *7:15 - 7:30* from ISCON towards PDPU. This direction is termed as ***North bound*** for our application. Likewise, the evening trip usually begins at *18:15 - 18:30* from PDPU towards ISCON and is termed as ***South bound*** direction for our application.\n",
    "\n",
    "We start with storing the raw location records (available in `.txt`) from the bus module into MongoDB database. By \"raw\" location records, we mean the location records are as they were stored in the bus module android application and we have not applied preprocessing on it. Three versions of bus module application were used for recording location traces with minor changes. In the first version `RawRecords`, the `time` was recorded in <tt>'dd Month YYYY hh mm ss'</tt>  string format (for eg: *8 Jan 2018 07:41:43*). Whereas in the second version `RawRecordEpoch`, the time was recorded in the [epoch format](https://en.wikipedia.org/wiki/Unix_time). and in the third version `RawRecordEpochSpeed`, the additional parameter `GPS Speed` was recorded. The raw location records corresponding to each version are stored separately in the folder corresponding to the version name.\n",
    "\n",
    "The location records file can contain one or more trip(s). Thus, before working with the location records, the records need to be separated as per the trips. The logic that we have used in our work is to check for the time difference of more than 30 min. between two consecutive records. If the time difference is more than 30 min., then they are considered as two different trips. The function `ReadLocationRecordsAndSeparateIntoSegement` reads the raw location records and separates the raw location records into different trip records using the above-mentioned logic.\n",
    "\n",
    "Subsequently, it saves the separated trips records into MongoDB with `dd_mm_yyyy__hh_mm_ss.RawRecords` as a collection name. Here <tt>dd_mm_yyyy__hh_mm_ss</tt> represents the start time of the trip and <tt>RawRecords</tt> indicates that the given collection is of raw location records. \n",
    "\n",
    "Further, status information related to every trip is maintained after every operation in `TripInfo` Collection. This is used at every stage to extract relevant records at each stage of execution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "RouteName='Git_ISCON_PDPU'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If one has executed the current notebook and have created MongoDB database previously then the following code needs to be executed for creating the fresh MongoDB database"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nIn the same way remove the Processed location record with GPS speed\\n'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "Used for deleting the location record database from MongoDB \n",
    "in case one have created the database earlier by executing the below codes.'''\n",
    "#con.drop_database(RouteName)\n",
    "\n",
    "'''\n",
    "In the same way remove the Processed location record with GPS speed\n",
    "'''\n",
    "#import os\n",
    "#path = \"/\".join(os.getcwd().split('/')) + \"/LocationRecords/RawRecordEpochSpeedProcessed\"\n",
    "#for file in [f for f in os.listdir(path)]:\n",
    "#    os.remove(path+\"/\"+file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "\n",
    "sys.path.append(\"/\".join(os.getcwd().split('/')) +'/Codes/LibCodes')\n",
    "\n",
    "'''Import project specific library'''\n",
    "import ReadSeparateTripMongo\n",
    "\n",
    "path = \"/\".join(os.getcwd().split('/')) + \"/LocationRecords\"\n",
    "\n",
    "'''Read location records folders'''\n",
    "BusModuleVersion = [f for f in os.listdir(path) if '.md' not in f]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nimport importlib\\nimportlib.reload(ReadSeparateTripMongo)\\n'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''For updating the lib changes effects'''\n",
    "'''\n",
    "import importlib\n",
    "importlib.reload(ReadSeparateTripMongo)\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reading file: ISCON_PDPU+1?29_01_2018_16_03_04.txt\n",
      "Reading file: ISCON_PDPU+1?07_02_2018_09_29_00\n",
      "Reading file: ISCON_PDPU+1?18_01_2018_07_38_10\n",
      "Reading file: ISCON_PDPU+1?22_12_2017_07_38_21\n",
      "Reading file: ISCON_PDPU+1?19_12_2017_18_41_16\n",
      "Reading file: ISCON_PDPU+1?08_01_2018_07_41_43\n",
      "Reading file: ISCON_PDPU+1?27_12_2017_07_55_49\n",
      "Reading file: ISCON_PDPU+1?12_02_2018_08_47_22.txt\n",
      "Reading file: ISCON_PDPU+1?15_02_2018_16_08_07.txt\n",
      "Reading file: ISCON_PDPU+1?21_02_2018_16_49_58.txt\n",
      "Reading file: ISCON_PDPU+1?23_03_2018_08_47_23\n",
      "Reading file: ISCON_PDPU+1?02_04_18_01_51_00\n",
      "Reading file: ISCON_PDPU+1?23_03_2018_08_47_22\n",
      "Reading file: ISCON_PDPU+1?14_02_2018_12_39_44.txt\n",
      "Reading file: ISCON_PDPU+1?22_02_2018_12_06_55.txt\n",
      "Reading file: ISCON_PDPU+1?12_02_2018_08_47_22.txt\n",
      "Reading file: ISCON_PDPU+1?15_02_2018_16_08_07.txt\n",
      "Reading file: ISCON_PDPU+1?21_02_2018_16_49_58.txt\n",
      "Reading file: ISCON_PDPU+1?23_03_2018_08_47_23\n",
      "Reading file: ISCON_PDPU+1?02_04_18_01_51_00\n",
      "Reading file: ISCON_PDPU+1?23_03_2018_08_47_22\n",
      "Reading file: ISCON_PDPU+1?14_02_2018_12_39_44.txt\n",
      "Reading file: ISCON_PDPU+1?22_02_2018_12_06_55.txt\n"
     ]
    }
   ],
   "source": [
    "'''Read location records and separate them into trips. Subsequently store them into MongoDB'''\n",
    "for RecordType in BusModuleVersion:\n",
    "    LocationRecordDir = '/'.join([path, RecordType])\n",
    "    for fileName in [f for f in os.listdir(LocationRecordDir)]:\n",
    "        \n",
    "        if RecordType == 'RawRecordEpochSpeed':\n",
    "            \n",
    "            ReadSeparateTripMongo.HandlerForNALocation(fileName, \n",
    "                                                       LocationRecordDir, \n",
    "                                                       LocationRecordDir + 'Processed')\n",
    "            \n",
    "            ReadSeparateTripMongo.ReadLocationRecordsAndSeparateIntoSegement(RouteName,\n",
    "                                                                             fileName,\n",
    "                                                                             LocationRecordDir + 'Processed',\n",
    "                                                                             RecordType)\n",
    "\n",
    "        else:\n",
    "            ReadSeparateTripMongo.ReadLocationRecordsAndSeparateIntoSegement(RouteName,\n",
    "                                                                             fileName,\n",
    "                                                                             LocationRecordDir,\n",
    "                                                                             RecordType)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that `ReadSeparateTripMongo.HandlerForNALocation` and `ReadSeparateTripMongo.ReadLocationRecordsAndSeparateIntoSegement` are the project specific library function. One can find help related to project specific functions by executing `FunctionName?`. For instance, on executing the below cell, the help window related to function will pop-up. For further reference, one can also look the library code file in the LibCode directory as mentioned in the file field on executing the below cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "ReadSeparateTripMongo.ReadLocationRecordsAndSeparateIntoSegement?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  MongoDB Collection record and it's representation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us now look at the `Trip` collection record for one of the trip (let say trip: *29_12_2017__07_37_27*)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'_id': ObjectId('5da547d552d4e70f7c4d3f28'),\n",
       "  'SingleTripInfo': '29_12_2017__07_37_27',\n",
       "  'filteredLocationRecord': False,\n",
       "  'DBSCANOp': False,\n",
       "  'segments': -1,\n",
       "  'segmentsTimeStamp': []}]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[rec for rec in con[RouteName]['TripInfo'].find({'SingleTripInfo':'29_12_2017__07_37_27'})]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, the keys represent the status of the operations applied on the location records. For instance, key `filteredLocationRecord` represents whether the given location records are filtered or not, `DBSCANOp` represents whether the DBSCAN based stoppage detection algorithm is applied on the collection records or not, `Segment` represents the number of segments in the location record, after applying interpolation and segmentation procedure. Concretely, the procedure segments the location record if it founds the GPS outage in the location record (the procedure is described in subsequent subsection). Likewise, `segmentsTimeStamp` determines the time stamp corresponding to segments in the location records to avoid GPS outage from consideration in all the subsequent procedures. Further, at different stages of modules, the status flags are computed for all the trips to keep the track of operation applied to a given trip. Subsequently, the modules extract the location record by querying the MongoDB collection *TripInfo* with the *status flag* values. For instance, to extract the trips on which filtering is not applied we would query MongoDB as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "SingleTripsInfo = [rec['SingleTripInfo'] for rec in con[RouteName]['TripInfo'].find({'filteredLocationRecord': False})]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['29_01_2018__07_39_47', '30_01_2018__07_42_30', '01_02_2018__07_39_12', '02_02_2018__07_38_50', '18_01_2018__07_38_10', '19_01_2018__07_38_47', '22_01_2018__07_41_04', '22_12_2017__07_38_21', '22_12_2017__18_38_34', '26_12_2017__07_32_35', '19_12_2017__18_41_16', '20_12_2017__07_38_14', '20_12_2017__18_31_19', '21_12_2017__07_52_59', '08_01_2018__07_41_43', '08_01_2018__18_37_49', '09_01_2018__07_40_01', '27_12_2017__07_55_48', '29_12_2017__07_37_27', '01_01_2018__07_38_27', '12_02_2018__07_40_14', '14_02_2018__18_30_22', '15_02_2018__07_45_52', '15_02_2018__16_08_22', '15_02_2018__18_33_19', '16_02_2018__07_45_41', '19_02_2018__07_46_19', '20_02_2018__07_41_48', '20_02_2018__18_31_07', '21_02_2018__07_42_42', '13_03_2018__07_29_52', '14_03_2018__07_35_46', '20_03_2018__07_28_45', '28_03_2018__18_39_21', '21_03_2018__07_32_39', '21_03_2018__18_32_40', '22_03_2018__07_38_43', '14_02_2018__07_41_04', '21_02_2018__18_28_29', '22_02_2018__07_42_45', '12_02_2018__07_40_14', '14_02_2018__18_30_22', '15_02_2018__07_45_52', '15_02_2018__16_08_22', '15_02_2018__18_33_19', '16_02_2018__07_45_41', '19_02_2018__07_46_19', '20_02_2018__07_41_48', '20_02_2018__18_31_07', '21_02_2018__07_42_42', '13_03_2018__07_29_52', '14_03_2018__07_35_46', '20_03_2018__07_28_45', '28_03_2018__18_39_21', '21_03_2018__07_32_39', '21_03_2018__18_32_40', '22_03_2018__07_38_43', '14_02_2018__07_41_04', '21_02_2018__18_28_29', '22_02_2018__07_42_45']\n"
     ]
    }
   ],
   "source": [
    "print(SingleTripsInfo)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us now look at the fields of collection record for a raw location record"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'_id': ObjectId('5da547ce52d4e70f7c4ce0ea'),\n",
       "  'epoch': 1517191787000.0,\n",
       "  'Longitude': 72.508215,\n",
       "  'Latitude': 23.03014,\n",
       "  'Accuracy': 6.599999904632568}]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[rec for rec in con[RouteName][SingleTripsInfo[0]+'.RawRecords'].find().limit(1)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here,\n",
    "`_id` is the unique object id assigned by MongoDB, `Longitude`, `Latitude` corresponds to the location attributes and \n",
    "`Accuracy` is the accuracy of location record in meters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Filtering"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have stored the location records in MongoDB collections, let us now look at the filtering preprocessing steps. We will remove the outlier location record from the trip records, and then apply segmentation and interpolation procedures to detect and handle GPS outage and unavailability. Concretely, we will interpolate the location records if the unavailability is for the smaller duration and smaller interval, else will separate the location records into different segments.\n",
    "\n",
    "### Outlier removal\n",
    "A given location record is considered as an outlier and removed if\n",
    "\n",
    "$$ ac > \\bar{ac} + 2 \\times \\sigma_{ac}$$\n",
    "\n",
    "where $\\bar{ac}$ and $\\sigma_{ac}$ is the mean and deviation of accuracy considering all the location records of a trip, respectively.\n",
    "\n",
    "### Segmentation and interpolation\n",
    "If the consecutive location records are separated by lesser duration ($<15$ seconds) or lesser distance ($<50$ m) then apply interpolation. Else, we separate the location records into different segments and update the information related to segment into the trip status information record of *TripInfo* collection.\n",
    "\n",
    "Note that we have extracted the trips for which filtering is not done using the code \n",
    "\n",
    "```python\n",
    "SingleTripsInfo = [rec['SingleTripInfo'] for rec in\n",
    "                   con[RouteName]['TripInfo'].find({'filteredLocationRecord': False})]\n",
    "```\n",
    "\n",
    "Now, we shall appy filtering into these *SingleTripsInfo*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "import Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'For updating the lib changes effects'"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''For updating the lib changes effects'''\n",
    "#importlib.reload(Preprocessing)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Executing filtering on 29_01_2018__07_39_47\n",
      "Executing filtering on 30_01_2018__07_42_30\n",
      "Executing filtering on 01_02_2018__07_39_12\n",
      "Executing filtering on 02_02_2018__07_38_50\n",
      "Executing filtering on 18_01_2018__07_38_10\n",
      "Executing filtering on 19_01_2018__07_38_47\n",
      "Executing filtering on 22_01_2018__07_41_04\n",
      "Executing filtering on 22_12_2017__07_38_21\n",
      "Executing filtering on 22_12_2017__18_38_34\n",
      "Executing filtering on 26_12_2017__07_32_35\n",
      "Executing filtering on 19_12_2017__18_41_16\n",
      "Executing filtering on 20_12_2017__07_38_14\n",
      "Executing filtering on 20_12_2017__18_31_19\n",
      "Executing filtering on 21_12_2017__07_52_59\n",
      "Executing filtering on 08_01_2018__07_41_43\n",
      "Executing filtering on 08_01_2018__18_37_49\n",
      "Executing filtering on 09_01_2018__07_40_01\n",
      "Executing filtering on 27_12_2017__07_55_48\n",
      "Executing filtering on 29_12_2017__07_37_27\n",
      "Executing filtering on 01_01_2018__07_38_27\n",
      "Executing filtering on 12_02_2018__07_40_14\n",
      "Executing filtering on 14_02_2018__18_30_22\n",
      "Executing filtering on 15_02_2018__07_45_52\n",
      "Executing filtering on 15_02_2018__16_08_22\n",
      "Executing filtering on 15_02_2018__18_33_19\n",
      "Executing filtering on 16_02_2018__07_45_41\n",
      "Executing filtering on 19_02_2018__07_46_19\n",
      "Executing filtering on 20_02_2018__07_41_48\n",
      "Executing filtering on 20_02_2018__18_31_07\n",
      "Executing filtering on 21_02_2018__07_42_42\n",
      "Executing filtering on 13_03_2018__07_29_52\n",
      "Executing filtering on 14_03_2018__07_35_46\n",
      "Executing filtering on 20_03_2018__07_28_45\n",
      "Executing filtering on 28_03_2018__18_39_21\n",
      "Executing filtering on 21_03_2018__07_32_39\n",
      "Executing filtering on 21_03_2018__18_32_40\n",
      "Executing filtering on 22_03_2018__07_38_43\n",
      "Executing filtering on 14_02_2018__07_41_04\n",
      "Executing filtering on 21_02_2018__18_28_29\n",
      "Executing filtering on 22_02_2018__07_42_45\n",
      "Executing filtering on 12_02_2018__07_40_14\n",
      "Executing filtering on 14_02_2018__18_30_22\n",
      "Executing filtering on 15_02_2018__07_45_52\n",
      "Executing filtering on 15_02_2018__16_08_22\n",
      "Executing filtering on 15_02_2018__18_33_19\n",
      "Executing filtering on 16_02_2018__07_45_41\n",
      "Executing filtering on 19_02_2018__07_46_19\n",
      "Executing filtering on 20_02_2018__07_41_48\n",
      "Executing filtering on 20_02_2018__18_31_07\n",
      "Executing filtering on 21_02_2018__07_42_42\n",
      "Executing filtering on 13_03_2018__07_29_52\n",
      "Executing filtering on 14_03_2018__07_35_46\n",
      "Executing filtering on 20_03_2018__07_28_45\n",
      "Executing filtering on 28_03_2018__18_39_21\n",
      "Executing filtering on 21_03_2018__07_32_39\n",
      "Executing filtering on 21_03_2018__18_32_40\n",
      "Executing filtering on 22_03_2018__07_38_43\n",
      "Executing filtering on 14_02_2018__07_41_04\n",
      "Executing filtering on 21_02_2018__18_28_29\n",
      "Executing filtering on 22_02_2018__07_42_45\n"
     ]
    }
   ],
   "source": [
    "for SingleTripInfo in SingleTripsInfo:\n",
    "    Preprocessing.ApplyFiltering(RouteName,SingleTripInfo)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Besides applying the filtering procedure, the `Preprocessing.ApplyFiltering` computes the relative standard deviation of the location records and starting hour of the trip. Further, it updates the segmentation information, mean and standard deviation accuracy of the location records, trip starting hour in the collection record of a trip in the *TripInfo* collection. For instance, let us now look at the Trip collection record for one of the trip (let say trip: 29_12_2017__07_37_27) as we did earlier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'_id': ObjectId('5da547d552d4e70f7c4d3f28'),\n",
       "  'SingleTripInfo': '29_12_2017__07_37_27',\n",
       "  'filteredLocationRecord': True,\n",
       "  'DBSCANOp': False,\n",
       "  'segments': 3,\n",
       "  'segmentsTimeStamp': [[1514513265000.0, 1514513272000.0],\n",
       "   [1514513294000.0, 1514516030000.0],\n",
       "   [1514516107000.0, 1514516189000.0]],\n",
       "  'RelativeSTDAccuracy': 10.19637724205251,\n",
       "  'TripStartHour': '07',\n",
       "  'meanAccuracy': 4.13410543598751,\n",
       "  'stdAccuracy': 0.42152898583748616}]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[rec for rec in con[RouteName]['TripInfo'].find({'SingleTripInfo':'29_12_2017__07_37_27'})]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One may change the trip (i.e. *29_12_2017__07_37_27*) and replace it with any of the other trips of the `SingleTripsInfo` for displaying the corresponding status of the selected trip. \n",
    "\n",
    "We would like to draw the attention of readers to the fields of the *TripInfo* collection record. The `Preprocessing.ApplyFiltering` has updated the field `filteredLocationRecord` to **True**, as it has applied the filtering process on a trip. Likewise, the other fields have also updated with the computed values."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## References\n",
    "[1] P. Rajput, M. Chaturvedi, and P. Patel, “Advanced urban public transportation system for indian scenarios,” in Proceedings of the 20th International Conference on Distributed Computing and Networking, ICDCN , India, January 04-07, 2019, 2019, pp. 327–336. doi: [10.1145/3288599.3288624](https://dl.acm.org/citation.cfm?id=3288624)."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
